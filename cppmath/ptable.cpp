#include "cppmath.h"

#define N_ELEMENTS 92

#include <deque>
#include <strstream>

// element names
static char* ElemName[] = { "H", "He", "Li", "Be", "B", "C", "N", "O", 
"F", "Ne", "Na", "Mg", "Al", "Si", "P", "S", "Cl", "Ar", "K", "Ca", "Sc", "Ti", 
"V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn", "Ga", "Ge", "As", "Se", "Br", "Kr", 
"Rb", "Sr", "Y", "Zr", "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn", 
"Sb", "Te", "I", "Xe", "Cs", "Ba", "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", 
"Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu", "Hf", "Ta", "W", "Re", "Os", "Ir", "Pt", 
"Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra", "Ac", "Th", "Pa", "U" };

static double ElemMass[] = { 1.000790, 4.003000, 6.941000, 9.012200, 10.811000, 
12.011000, 14.007000, 15.999000, 18.998000, 20.180000, 22.990000, 24.305000, 26.982000, 
28.086, 30.974000, 32.064000, 35.453000, 39.948000, 39.098000, 40.080000, 44.956000, 
47.900000, 50.942000, 51.996000, 54.938000, 5.847000, 58.933000, 58.690000, 63.546000, 
65.380000, 65.380000, 72.610000, 74.992000, 78.960000, 79.904000, 83.800000, 85.470000, 
87.956000, 88.905000, 91.220000, 92.906000, 95.940000, 98.000000, 101.070000, 102.910000, 
106.42, 107.870000, 112.410000, 114.820000, 118.690000, 121.175000, 127.600000, 126.900000, 
131.290000, 132.910000, 137.330000, 138.920000, 140.120000, 140.910000, 144.240000, 145.000000, 
150.360000, 151.970000, 157.250000, 158.924000, 162.500000, 164.930000, 167.260000, 169.934000, 
173.040000, 174.970000, 178.490000, 180.948000, 183.850000, 186.200000, 190.200000, 192.200000, 
195.090000, 196.197000, 200.590000, 204.370000, 207.190000, 208.980000, 209.000000, 210.000000, 
222.000000, 223.000000, 226.000000, 227.028000, 204.370000, 231.000000, 238.030000 }; 

static double ElemF1[] = { 0.999984, 2.000140, 3.001160, 4.004100, 5.009610, 6.019170, 7.032510, 
8.052310, 9.075250, 10.104600, 11.137800, 12.179900, 13.212400, 14.296900, 15.303300, 16.335100, 
17.368200, 18.406500, 19.415800, 20.381800, 21.343700, 22.243300, 23.078400, 23.842600, 24.461700, 
24.857500, 24.621300, 25.003000, 27.024600, 28.439800, 29.712400, 30.900900, 32.053900, 33.206100, 
34.324300, 35.464600, 36.562900, 37.641100, 38.721500, 39.816900, 40.905800, 41.970100, 43.020100, 
44.074100, 45.119800, 46.174100, 47.175500, 48.157300, 49.137400, 50.087900, 50.984900, 51.942300, 
52.811200, 53.643800, 54.331300, 55.035600, 55.684500, 56.181600, 56.523300, 56.819700, 57.090500, 
56.484300, 54.059100, 54.708600, 55.834900, 56.238600, 51.193400, 58.523800, 60.848000, 62.684600, 
64.231200, 65.860700, 67.507400, 68.985600, 70.257300, 71.360100, 72.598600, 73.663300, 74.985100, 
76.104100, 77.195200, 78.272100, 79.315300, 80.246200, 81.356600, 82.636000, 83.783700, 84.672300, 
85.654500, 86.639400, 87.307800, 86.784300 };

static double ElemF2[] = { 0.000001, 0.000040, 0.000334, 0.001538, 0.004075, 0.009598, 0.018355, 
0.033698, 0.054953, 0.085018, 0.122218, 0.181132, 0.241506, 0.324848, 0.436244, 0.550385, 0.698207, 
0.901226, 1.103770, 1.312320, 1.609780, 1.868080, 2.193000, 2.438970, 2.832050, 3.208440, 3.561980, 
0.524024, 0.607548, 0.703408, 0.801857, 0.919435, 1.045950, 1.180980, 1.327900, 1.426990, 1.599260, 
1.844900, 2.108410, 2.279010, 2.504980, 2.748700, 2.990230, 3.262520, 3.638120, 3.984080, 4.264270, 
4.727390, 4.956040, 5.518720, 5.663700, 6.761620, 6.933360, 7.716950, 8.238900, 9.025010, 9.766900, 
10.080100, 10.563000, 11.346500, 11.935900, 13.157800, 11.585300, 13.241800, 9.202320, 9.922650, 
4.007610, 4.099250, 4.435050, 4.716410, 5.026080, 5.277660, 5.475010, 5.768540, 6.081810, 6.427880, 
6.805990, 7.235600, 7.716880, 8.062060, 8.444620, 8.933570, 9.298040, 9.700510, 10.399300, 11.007300, 
11.489700, 12.001500, 12.385100, 13.167400, 14.045900, 14.020400 };

static double ElemDens[] = { 0.076000, 0.124800, 0.534000, 1.847700, 2.340000, 3.513000, 1.026000, 
2.000000, 1.516000, 1.444000, 0.971000, 1.738000, 2.698000, 2.329000, 1.820000, 2.070000, 2.030000, 
1.656000, 0.862000, 1.550000, 2.989000, 4.540000, 6.110000, 7.190000, 7.440000, 7.874000, 8.900000, 
8.902000, 8.960000, 7.133000, 5.907000, 5.323000, 5.780000, 4.790000, 4.050000, 2.823000, 1.532000, 
2.540000, 4.469000, 6.506000, 8.570000, 10.220000, 11.500000, 12.370000, 12.410000, 12.020000, 
10.500000, 8.650000, 7.310000, 7.310000, 6.691000, 6.240000, 4.930000, 3.540000, 1.873000, 3.594000, 
6.145000, 8.240000, 6.773000, 7.007000, 7.220000, 7.520000, 5.243000, 7.900400, 8.229000, 8.550000, 
8.795000, 9.066000, 9.321000, 6.965000, 9.840000, 13.310000, 16.654000, 19.300000, 21.020000, 22.590000, 
22.420000, 21.450000, 19.320000, 13.546000, 11.850000, 11.350000, 9.747000, 9.320000, 0.000000, 
4.400000, 0.000000, 5.000000, 10.060000, 11.720000, 15.370000, 18.950000 };


char* CPeriodicTable::Name(int Z) const
{
	if (1<=Z && Z<=N_ELEMENTS) return ElemName[Z-1];
	else return 0;
}
double CPeriodicTable::Mass(int Z) 
{
	if (1<=Z && Z<=N_ELEMENTS) return ElemMass[Z-1];
	else return 0.;
}
double CPeriodicTable::Density(int Z) 
{
	if (1<=Z && Z<=N_ELEMENTS) return ElemDens[Z-1];
	else return 0.;
}
cdouble CPeriodicTable::FormFactor(int Z)
{
	if (1<=Z && Z<=N_ELEMENTS) return cdouble(ElemF1[Z-1],ElemF2[Z-1]);
	else return 0.;
}
int CPeriodicTable::AnalyzeFormula(const char* strFormula, CArray1D& x, CIntArray1D& z)
{
	int nElem = 0;
	std::deque<int> zque;
	std::deque<double> xque;

	int nchar = strlen(strFormula);
	
	if (nchar<1) return 0;

	char* F = new char[nchar+1];
	strcpy(F,strFormula);
	
	int i;
	
	while (strlen(F)>0) {
		// read element
		char el[3];
		i = 0;
		if (strlen(F)>1) {
			el[0] = F[0]; el[1] = F[1]; el[2] = 0;
			i=Z(el);
			if (i) {
				zque.push_back(i);
				memmove(F,F+2,strlen(F)-1);
			}
		}
		if (!i) {
			el[0] = F[0]; el[1] = 0;
			i=Z(el);
			if (i) {
				zque.push_back(i);
				memmove(F,F+1,strlen(F));
			}
		}
		if (!i) return 0;

		if (strlen(F)<1) {
			xque.push_back(1.);
			nElem++;
			break;
		}
		else {
			istrstream is(F,0);
			streampos mark = is.tellg();
			double dx;
			is >> dx;
			if (is.fail()) {
				is.clear();
				is.seekg(mark);
				xque.push_back(1.);
				nElem++;
			}
			else {
				mark = is.tellg();
				memmove(F,F+mark,strlen(F)+1-mark);
				xque.push_back(dx);
				nElem++;
			}
		}
	}

	if (nElem) {
		x = CArray1D(nElem);
		z = CIntArray1D(nElem);
		std::deque<int>::iterator ii;
		std::deque<double>::iterator id;
		
		int k = 0;
		for(ii = zque.begin();
		ii != zque.end();
		ii++)
		{
			z[k++] = *ii;
		}
		k = 0;
		for(id = xque.begin();
		id != xque.end();
		id++)
		{
			x[k++] = *id;
		}
		
		return 1;
	} else return 0;
}

int CPeriodicTable::Z(const char *name)
{
	int z = 0, l = strlen(name), i;
	
	if (l>0 && l<3) {
		i=1;
		while (!z && i<=N_ELEMENTS) {
			if (strcmp(ElemName[i-1],name)==0) z=i;
			i++;
		}
	}
	return z;
}
